#!/usr/bin/env python
"""
pre-commit clang-format hook
============================

Runs clang-format on the given file and exits with a non-zero code if any changes were made.
"""
# std imports
import argparse
import os
import subprocess
import sys

USAGE = 'clang-format-hook <file>'

DESCRIPTION = '''
Runs clang-format on the given file and exits with a non-zero code if any changes were made.
'''

if sys.platform == 'win32':
    CLANG_FORMAT_EXE =  os.path.join(os.path.dirname(__file__), 'clang-format.exe')
elif sys.patform == 'linux':
    CLANG_FORMAT_EXE =  os.path.join(os.path.dirname(__file__), 'clang-format-linux64')
else:
    raise RuntimeError('Unknown platform "{}"'.format(sys.platform))


def main():
    parser = argparse.ArgumentParser(usage=USAGE, description=DESCRIPTION)
    parser.add_argument('file', help='File to run clang-format on.')
    args = parser.parse_args()

    # return non-zero exit code of there were changes
    return 1 if clang_format(args.file) else 0


def clang_format(filename):
    """
    Clang format the given file and return True if contents were changed
    :param filename: Path to a file to format
    :return: True if file contents were changed, False otherwise
    """
    # read current contents of file and compare with formatted content

    with open(filename, 'rb') as f:
        contents_orig = f.read()

    contents_formatted = run_clang_format(filename)
    changed = (contents_formatted != contents_orig)
    if changed:
        print("Fixing {}".format(filename))
        with open(filename, 'wb') as fixed_file:
            fixed_file.write(contents_formatted)

    return changed


def run_clang_format(filename):
    p = subprocess.Popen([CLANG_FORMAT_EXE, '-fallback-style=None', filename],
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if p.returncode != 0:
        raise RuntimeError(stderr)

    return stdout.strip()


if __name__ == '__main__':
    sys.exit(main())
